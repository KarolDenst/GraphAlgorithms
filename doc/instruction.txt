Description.
    GraphAlgorithms -- Collection of graph algorithms.

Disclaimers.
    This is a short instruction. For a more detailed version check detailed_instruction.txt.
    The instruction below was tested on a laboratory computer available in room 311.

Running the application (Windows).
    Open the main folder in PowerShell.

    In what follows it is assumed that the current working directory was set to the project folder as indicated above.
    The `ls` command will show 4 folders: Doc, Example, Exe, and Source.

    To run the program navigate to the Exe folder by typing `cd Exe`.
    To view the built-in user manual run the program with the `--help` option, i.e.
        `./GraphAlgorithms --help`
    
    This will give a list of available commands. To learn more about individual commands, run each of them with the `--help` option, e.g.
        `./GraphAlgorithms max-clique --help`

    For demonstration purposes, you can run the following commands (it is assumed that the current working directory is still GraphAlgorithms/Exe):
        Find the maximum clique on file `example3_size3.txt` using the exact algorithm and default size definition (vertices-then-edges size)
            `./GraphAlgorithms max-clique -f ../Examples/example3_size3.txt -t exact`
            The command gives the following output:
                1, 2
                Number of vertices: 2

                0 1 2
                2 0 1
                0 5 0
            This means that a clique consisting of two vertices (with indices 1 and 2) was found.
            The part of the adjacency matrix corresponding to the clique is colored red.

        Run the heuristic maximum common subgraph algorithm on graphs from files `example6_size4.txt` and `example7_size4.txt`
            `./GraphAlgorithms mcs -f ../Examples/example6_size4.txt -f2 ../Examples/example7_size4.txt -t heuristic`
            The command gives the following output:
                MCS in graph 1: 0, 1, 2, 3
                MCS in graph 2: 0, 2, 3, 1
                4 vertices

                Graph 1:
                0 1 5 0
                2 0 0 0
                2 6 0 3
                0 7 5 0
                Graph 2:
                0 0 2 1
                0 0 1 4
                1 3 0 1
                0 4 1 0
            This means that a maximum common subgraph with 4 vertices was found, and the isomorphism is given by:
                0, 1, 2, 3
                0, 2, 3, 1
            where the 1st row lists the vertices in a subgraph of example6_size4.txt, and the 2nd row lists corresponding vertices of the subgraph of example7_size4.txt

        Calculate the metric between two graphs (in this example, it is the same graph, located in file `example26_size8.txt`).
            `./GraphAlgorithms metric -f ../Examples/example26_size8.txt -f2 ../Examples/example26_size8.txt -t heuristic`
            As expected, the result is 0.
        
        Calculate the size of the graph given in the file `example26_size8.txt`. In this example, the default size (vertex-then-edge) definition is used.
            For a definition of size refer to the report file.
            `./GraphAlgorithms size -f ../Examples/example26_size8.txt`
            The output of this command is:
                Graph size: (8, 300)


        Print the adjacency matrix of a graph given in the file `example26_size8.txt`.
            `./GraphAlgorithms graph -f ../Examples/example26_size8.txt`
            The output of this command is the adjacency matrix:
                0 1 5 5 0 3 0 1
                0 0 3 9 10 1 5 10
                0 15 0 1 10 8 7 15
                14 12 1 0 9 0 2 12
                12 7 11 0 0 1 0 13
                5 11 13 9 9 0 10 0
                1 2 2 5 4 14 0 6
                0 3 0 0 0 0 3 0

Building the application (Windows).
    To build the application from source, run from the Source folder:
        `dotnet build GraphAlgorithms --configuration Release`

    The build files will be places in GraphAlgorithms/bin/Release/net7.0.

Additional functionalities.
    DIMACS benchmark set.
        The maximum clique-finding algorithm can be tested on the instances from the DIMACS benchmark set (https://iridia.ulb.ac.be/~fmascia/maximum_clique/DIMACS-benchmark).
        For example, to run the heuristic algorithm on the first graph instance listed there, `C125.9`, run 
            `./GraphAlgorithms dimacs --name C125.9 --type heuristic`

        This will download a file with the test data to a newly created directory `Datasets`.
        Because the graphs available in the benchmark set are big, it's not recommended to use them for testing the exact algorithm.